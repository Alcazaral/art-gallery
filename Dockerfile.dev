# Create image based on the official Node 7 image from dockerhub
FROM node:7

# ================= Image Magick =================

ENV MAGICK_URL "http://imagemagick.org/download/releases"
ENV MAGICK_VERSION 6.9.1-10

RUN gpg --keyserver pool.sks-keyservers.net --recv-keys 8277377A \
  && apt-get update -y \
  && apt-get install -y --no-install-recommends \
    libpng-dev libjpeg-dev libtiff-dev libopenjpeg-dev \
  && apt-get remove -y imagemagick \
  && cd /tmp \
  && curl -SLO "${MAGICK_URL}/ImageMagick-${MAGICK_VERSION}.tar.xz" \
  && curl -SLO "${MAGICK_URL}/ImageMagick-${MAGICK_VERSION}.tar.xz.asc" \
  && gpg --verify "ImageMagick-${MAGICK_VERSION}.tar.xz.asc" "ImageMagick-${MAGICK_VERSION}.tar.xz" \
  && tar xf "ImageMagick-${MAGICK_VERSION}.tar.xz" \

# http://www.imagemagick.org/script/advanced-unix-installation.php#configure
  && cd "ImageMagick-${MAGICK_VERSION}" \
  && ./configure \
    --disable-static \
    --enable-shared \

    --with-jpeg \
    --with-jp2 \
    --with-openjp2 \
    --with-png \
    --with-tiff \
    --with-quantum-depth=8 \

    --without-magick-plus-plus \
    # disable BZLIB support
    --without-bzlib \
    # disable ZLIB support
    --without-zlib \
    # disable Display Postscript support
    --without-dps \
    # disable FFTW support
    --without-fftw \
    # disable FlashPIX support
    --without-fpx \
    # disable DjVu support
    --without-djvu \
    # disable fontconfig support
    --without-fontconfig \
    # disable Freetype support
    --without-freetype \
    # disable JBIG support
    --without-jbig \
    # disable lcms (v1.1X) support
    --without-lcms \
    # disable lcms (v2.X) support
    --without-lcms2 \
    # disable Liquid Rescale support
    --without-lqr \
     # disable LZMA support
    --without-lzma \
    # disable OpenEXR support
    --without-openexr \
    # disable PANGO support
    --without-pango \
    # disable TIFF support
    --without-webp \
    # don't use the X Window System
    --without-x \
    # disable XML support
    --without-xml \

  && make \
  && make install \
  && ldconfig /usr/local/lib \

  && apt-get -y autoclean \
  && apt-get -y autoremove \
  && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*


# ================= Dockerfile =================

# dumb-init for signal handling
RUN wget https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb
RUN dpkg -i dumb-init_*.deb

# Create a user to manage our app
# RUN useradd --user-group --create-home app

# Set Home env
ENV HOME=/usr/app

# Change directory so that our commands run inside this new directory
WORKDIR $HOME/src

# Copy the dependencies description and set permissions to app
COPY package.json $HOME/src
# RUN chown -R app:app $HOME/*

# User for any RUN, CMD and ENTRYPOINT command
# USER app

# Install npm packages
RUN npm install

# Install npm global packages
RUN npm install -g gulp

# Expose the port the app runs in
EXPOSE 3000

# Serve the app
# CMD ["gulp", "dev"]

# Runs "/usr/bin/dumb-init -- /my/script --with --args"
ENTRYPOINT ["/usr/bin/dumb-init", "--", "./docker-entrypoint-dev.sh"]

# CMD ["sh -c 'npm install && npm cache clean && gulp dev'"]

# ================= Docs =================

# === Build this image ===
# docker build -t rubylens-web-server -f Dockerfile.dev .

# === Run the image into a container with the code mounted ===
# docker run -t --name rubylens-web-server -p 3000:3000 --env-file ./.env -v "$PWD:/usr/app/src" -v /usr/app/src/node_modules rubylens-web-server

# === Stop the container ===
# docker stop rubylens-web-server

# === Start the stoped container with STDOUT/STDERR attached ===
# docker start -a rubylens-web-server
